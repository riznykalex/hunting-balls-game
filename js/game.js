// game.js
import { VERSION } from './version.js';
import { Unit } from './unit.js';
import { Food } from './food.js';
import { vectorToVelocity } from './movement.js';

window.addEventListener('load', () => {
  console.log(`üéÆ Hunting Units ‚Äî –≤–µ—Ä—Å—ñ—è ${VERSION}`);
});

const gameContainer = document.getElementById('game');
const WIDTH = window.innerWidth;
const HEIGHT = window.innerHeight;

// —Ä–æ–±–∏–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
gameContainer.style.position = 'relative';
gameContainer.style.width = `${WIDTH}px`;
gameContainer.style.height = `${HEIGHT}px`;

let units = [];
let foods = [];
let nextUnitId = 0;
let nextFoodId = 0;

// –ü–∞—Ä–∞–º–µ—Ç—Ä–∏
const INITIAL_UNITS = 12;
const INITIAL_FOOD = 35;
const MAX_UNITS = 40;
const MAX_FOOD = 80;

// —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–¥–∏–Ω–∏—Ü—é (–∫—É–ª—å–∫—É)
function createUnitRandom() {
  const x = Math.random() * (WIDTH - 60);
  const y = Math.random() * (HEIGHT - 60);
  const energy = Math.random() * 1.8 + 1.2; // 1.2 .. 3.0
  const u = new Unit(nextUnitId++, x, y, energy, gameContainer, WIDTH, HEIGHT);
  // –Ω–µ–≤–µ–ª–∏–∫–∏–π –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä—É—Ö
  const ang = Math.random() * Math.PI * 2;
  u.setVelocity(Math.cos(ang) * (u.speed * 0.4), Math.sin(ang) * (u.speed * 0.4));
  u.isMoving = true;
  units.push(u);
  return u;
}

// —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ó–∂—É
function createFoodRandom() {
  const x = Math.random() * (WIDTH - 20);
  const y = Math.random() * (HEIGHT - 20);
  const energies = [0.1, 0.2, 0.3];
  const en = energies[Math.floor(Math.random() * energies.length)];
  const f = new Food(nextFoodId++, x, y, en, gameContainer);
  foods.push(f);
  return f;
}

// —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
for (let i = 0; i < INITIAL_UNITS; i++) createUnitRandom();
for (let i = 0; i < INITIAL_FOOD; i++) createFoodRandom();

// –ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –ª–æ–≥—ñ–∫–∞ (–ø—Ä–æ—Å—Ç–∞): –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —é–Ω—ñ—Ç–∞ –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á—É —ó–∂—É, —è–∫—â–æ —î ‚Äî –π—Ç–∏ –Ω–∞ –Ω–µ—ó.
// —è–∫—â–æ –Ω–µ–º–∞—î —ó–∂—ñ –ø–æ—Ä—É—á, —à—É–∫–∞—Ç–∏ —Å–ª–∞–±—à—É –∂–µ—Ä—Ç–≤—É (–æ–¥–∏–Ω–∏—Ü—é) —ñ "–ø—ñ–¥—Ö–æ–¥–∏—Ç–∏" –¥–æ –Ω–µ—ó.
// –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: —ó–∂–∞ > –∞—Ç–∞–∫–∞
function autonomousBehaviour(unit) {
  if (unit.isControlled || unit.isSleeping) return;

  // –ü–æ—à—É–∫ —ó–∂—ñ –≤ —Ä–∞–¥—ñ—É—Å—ñ
  let closestFood = null;
  let minFd = Infinity;
  for (const f of foods) {
    const d = Math.hypot((f.x - unit.x), (f.y - unit.y));
    if (d < minFd) {
      minFd = d;
      closestFood = f;
    }
  }

  if (closestFood && minFd < 300) {
    // —Ä—É—Ö –¥–æ —ó–∂—ñ
    const targetX = closestFood.x;
    const targetY = closestFood.y;
    const res = vectorToVelocity(unit.x, unit.y, targetX, targetY, unit.speed);
    unit.setVelocity(res.vx, res.vy);
    unit.isMoving = true;
    // —è–∫—â–æ –≤–∂–µ –±—ñ–ª—è —ó–∂—ñ ‚Äî –∑'—ó–¥–∞—î–º–æ
    if (res.dist < (unit.size / 2 + closestFood.size || 20)) {
      unit.energy += closestFood.energy;
      if (unit.energy > 6) unit.energy = 6;
      unit.size = 30 + Math.max(0, unit.energy) * 8;
      // –≤–∏–¥–∞–ª–∏—Ç–∏ —ó–∂—É
      closestFood.remove();
      foods.splice(foods.indexOf(closestFood), 1);
      unit.stop(); // –∑—É–ø–∏–Ω–∏—Ç–∏—Å—å –ø—ñ—Å–ª—è –ø—Ä–∏–π–æ–º—É —ó–∂—ñ
    }
    return;
  }

  // –Ø–∫—â–æ —ó–∂—ñ –Ω–µ–º–∞—î –∞–±–æ –¥–∞–ª–µ–∫–æ ‚Äî —à—É–∫–∞—Ç–∏ —Å–ª–∞–±—à—É –∂–µ—Ä—Ç–≤—É (—ñ–Ω—à–∏–π —é–Ω—ñ—Ç)
  let prey = null;
  let minDist = Infinity;
  for (const other of units) {
    if (other === unit) continue;
    if (other.energy < unit.energy - 0.2) { // —Ç—Ä–æ—Ö–∏ —Å–ª–∞–±—à–µ
      const d = Math.hypot(other.x - unit.x, other.y - unit.y);
      if (d < minDist && d < 400) {
        minDist = d;
        prey = other;
      }
    }
  }

  if (prey) {
    // —Ä—É—Ö–∞—î–º–æ—Å—è –¥–æ –∂–µ—Ä—Ç–≤–∏ (–ø—Ä–∏—Å—Ç–æ—Å—É–π –¥–∞–ª—ñ –ª–æ–≥—ñ–∫—É –±–æ—î–Ω–∫–∏)
    const res = vectorToVelocity(unit.x, unit.y, prey.x, prey.y, unit.speed);
    unit.setVelocity(res.vx, res.vy);
    unit.isMoving = true;
    // —è–∫—â–æ –¥—É–∂–µ –±–ª–∏–∑—å–∫–æ ‚Äî –Ω–∞–Ω–æ—Å–∏–º–æ "—É–¥–∞—Ä"
    if (res.dist < (unit.size / 2 + prey.size / 2 + 6)) {
      const damage = 0.12;
      prey.energy -= damage;
      unit.energy += damage * 0.9; // —Ç—Ä–æ—Ö–∏ –≤—Ç—Ä–∞—á–∞—î—Ç—å—Å—è
      if (prey.energy <= 0) {
        prey.remove();
        units.splice(units.indexOf(prey), 1);
      }
    }
    return;
  }

  // –ù—ñ—á–æ–≥–æ ‚Äî –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –±–ª—É–∫–∞—é—á–∏–π —Ä—É—Ö (–∫–æ–∂–µ–Ω —Ä–∞–∑ —Ç—Ä–æ—Ö–∏ –∑–º—ñ–Ω—é—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫)
  if (!unit.isMoving || Math.random() < 0.01) {
    const ang = Math.random() * Math.PI * 2;
    unit.setVelocity(Math.cos(ang) * unit.speed * 0.4, Math.sin(ang) * unit.speed * 0.4);
    unit.isMoving = true;
  }
}

// —ñ–≥—Ä–æ–≤–∏–π —Ü–∏–∫–ª –∑ dt
let lastTs = performance.now();
function update(ts = performance.now()) {
  const dt = Math.min(0.1, (ts - lastTs) / 1000); // —Å–µ–∫—É–Ω–¥–∏, clamp –¥–æ 0.1
  lastTs = ts;

  // –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —é–Ω—ñ—Ç–∞ ‚Äî –∑—Ä–æ–±–∏—Ç–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω—É –ø–æ–≤–µ–¥—ñ–Ω–∫—É (—è–∫—â–æ –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª—é—î—Ç—å—Å—è)
  for (const u of [...units]) { // –∫–æ–ø—ñ—è
    autonomousBehaviour(u);
    u.step(dt, 0.01, 0.9, 2); // –Ω–∞–ª–∞—à—Ç–æ–≤—É–π –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏: costPerPixel, sleepRegen/sec, wakeEnergy
  }

  // —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ –¥–æ–¥–∞—î–º–æ —ó–∂—É/—é–Ω—ñ—Ç—ñ–≤ —è–∫—â–æ –º–∞–ª–æ
  if (foods.length < Math.min(MAX_FOOD, INITIAL_FOOD + 10) && Math.random() < 0.03) createFoodRandom();
  if (units.length < Math.min(MAX_UNITS, INITIAL_UNITS + 4) && Math.random() < 0.01) createUnitRandom();

  // –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–∞–¥—Ä
  requestAnimationFrame(update);
}

// —Å—Ç–∞—Ä—Ç
requestAnimationFrame(update);
